<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.scau.zxks.dao.QuestionoutofstorageMapper" >
  <resultMap id="BaseResultMap" type="cn.edu.scau.zxks.entity.Questionoutofstorage" >
    <id column="borrow_record_id" property="borrowRecordId" jdbcType="VARCHAR" />
    <result column="questionbank_id" property="questionbankId" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="out_user_email" property="outUserEmail" jdbcType="VARCHAR" />
    <result column="in_user_email" property="inUserEmail" jdbcType="VARCHAR" />
    <result column="test_id" property="testId" jdbcType="VARCHAR" />
    <result column="borrow_time" property="borrowTime" jdbcType="TIMESTAMP" />
    <result column="pre_returntime" property="preReturntime" jdbcType="TIMESTAMP" />
    <result column="returen_time" property="returenTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    borrow_record_id, questionbank_id, email, out_user_email, in_user_email, test_id, 
    borrow_time, pre_returntime, returen_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.edu.scau.zxks.entity.QuestionoutofstorageExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from questionoutofstorage
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from questionoutofstorage
    where borrow_record_id = #{borrowRecordId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from questionoutofstorage
    where borrow_record_id = #{borrowRecordId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.edu.scau.zxks.entity.QuestionoutofstorageExample" >
    delete from questionoutofstorage
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.edu.scau.zxks.entity.Questionoutofstorage" >
    insert into questionoutofstorage (borrow_record_id, questionbank_id, email, 
      out_user_email, in_user_email, test_id, 
      borrow_time, pre_returntime, returen_time
      )
    values (#{borrowRecordId,jdbcType=VARCHAR}, #{questionbankId,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{outUserEmail,jdbcType=VARCHAR}, #{inUserEmail,jdbcType=VARCHAR}, #{testId,jdbcType=VARCHAR}, 
      #{borrowTime,jdbcType=TIMESTAMP}, #{preReturntime,jdbcType=TIMESTAMP}, #{returenTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.scau.zxks.entity.Questionoutofstorage" >
    insert into questionoutofstorage
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="borrowRecordId != null" >
        borrow_record_id,
      </if>
      <if test="questionbankId != null" >
        questionbank_id,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="outUserEmail != null" >
        out_user_email,
      </if>
      <if test="inUserEmail != null" >
        in_user_email,
      </if>
      <if test="testId != null" >
        test_id,
      </if>
      <if test="borrowTime != null" >
        borrow_time,
      </if>
      <if test="preReturntime != null" >
        pre_returntime,
      </if>
      <if test="returenTime != null" >
        returen_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="borrowRecordId != null" >
        #{borrowRecordId,jdbcType=VARCHAR},
      </if>
      <if test="questionbankId != null" >
        #{questionbankId,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="outUserEmail != null" >
        #{outUserEmail,jdbcType=VARCHAR},
      </if>
      <if test="inUserEmail != null" >
        #{inUserEmail,jdbcType=VARCHAR},
      </if>
      <if test="testId != null" >
        #{testId,jdbcType=VARCHAR},
      </if>
      <if test="borrowTime != null" >
        #{borrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="preReturntime != null" >
        #{preReturntime,jdbcType=TIMESTAMP},
      </if>
      <if test="returenTime != null" >
        #{returenTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.edu.scau.zxks.entity.QuestionoutofstorageExample" resultType="java.lang.Integer" >
    select count(*) from questionoutofstorage
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update questionoutofstorage
    <set >
      <if test="record.borrowRecordId != null" >
        borrow_record_id = #{record.borrowRecordId,jdbcType=VARCHAR},
      </if>
      <if test="record.questionbankId != null" >
        questionbank_id = #{record.questionbankId,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.outUserEmail != null" >
        out_user_email = #{record.outUserEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.inUserEmail != null" >
        in_user_email = #{record.inUserEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.testId != null" >
        test_id = #{record.testId,jdbcType=VARCHAR},
      </if>
      <if test="record.borrowTime != null" >
        borrow_time = #{record.borrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.preReturntime != null" >
        pre_returntime = #{record.preReturntime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.returenTime != null" >
        returen_time = #{record.returenTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update questionoutofstorage
    set borrow_record_id = #{record.borrowRecordId,jdbcType=VARCHAR},
      questionbank_id = #{record.questionbankId,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      out_user_email = #{record.outUserEmail,jdbcType=VARCHAR},
      in_user_email = #{record.inUserEmail,jdbcType=VARCHAR},
      test_id = #{record.testId,jdbcType=VARCHAR},
      borrow_time = #{record.borrowTime,jdbcType=TIMESTAMP},
      pre_returntime = #{record.preReturntime,jdbcType=TIMESTAMP},
      returen_time = #{record.returenTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.scau.zxks.entity.Questionoutofstorage" >
    update questionoutofstorage
    <set >
      <if test="questionbankId != null" >
        questionbank_id = #{questionbankId,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="outUserEmail != null" >
        out_user_email = #{outUserEmail,jdbcType=VARCHAR},
      </if>
      <if test="inUserEmail != null" >
        in_user_email = #{inUserEmail,jdbcType=VARCHAR},
      </if>
      <if test="testId != null" >
        test_id = #{testId,jdbcType=VARCHAR},
      </if>
      <if test="borrowTime != null" >
        borrow_time = #{borrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="preReturntime != null" >
        pre_returntime = #{preReturntime,jdbcType=TIMESTAMP},
      </if>
      <if test="returenTime != null" >
        returen_time = #{returenTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where borrow_record_id = #{borrowRecordId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.scau.zxks.entity.Questionoutofstorage" >
    update questionoutofstorage
    set questionbank_id = #{questionbankId,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      out_user_email = #{outUserEmail,jdbcType=VARCHAR},
      in_user_email = #{inUserEmail,jdbcType=VARCHAR},
      test_id = #{testId,jdbcType=VARCHAR},
      borrow_time = #{borrowTime,jdbcType=TIMESTAMP},
      pre_returntime = #{preReturntime,jdbcType=TIMESTAMP},
      returen_time = #{returenTime,jdbcType=TIMESTAMP}
    where borrow_record_id = #{borrowRecordId,jdbcType=VARCHAR}
  </update>
</mapper>